02:50 05/01/2020

	Adição do campo de DeviceID e Device Vendor na estrutura DeviceObject para permitir a verificação da existência de um objeto já criado para aquele dispositivo na função AddDevice do Driver quando chamado pelo IOReportDevice.

11:10 07/01/2020

	Alteração da constante SD_DEVICE_CONTROL para SD_USER_DEVICE_CONTROL no Sistema de Gerenciamento de Dispositivos para distinguir comandos de controle do sistema dos comandos de controle de usuario.

12:43 07/01/2020

	Driver PCI funcionando corretamente, escaneando o barramento e reportando os dispositivos encontrados para o IOManger.
	Driver Ehci sendo chamado corretamente.

00:22 19/01/2020
	
	A função de inicialização do Driver EHCI está senda chamada, falta implementar a função de leitura do PCI Config Space no driver PCI para que o Driver Ehci possa dar continuidade a inicialização do Controlador.

PROJEÇÃO DE TAREFA: Escrever a inicialização do do Controlador EHCI e fazer a chamada do Driver Root Bus do Barramento USB. Obs. por questões de performance talves o código do Root Bus serja implementado junto ao Driver Ehci, uma vez que só existirá um Barramento Raiz por controlador. O Driver de Barramento Generico ( Como um Hub) será implementado separadamente ou será reaproveitado o Código do Root Bus.

11:13 26/01/2020 (Log no dia seguinte)

	A função de leitura do espaço de configuração PCI está funcionando e retornando para o driver EHCI.

PROJEÇÃO DE TAREFA: Dar continuidade a inicialização do controlador EHCI.

Obs.: Para cada controlador sendo inicializado deve ser alocado memoria para suas respectivas estruturas.

01:02 27/03/2020

ALTERÇÃO:

	Devido os testes anteriores terem sidos feitos em uma máquina que não
possuia o controlador EHCI com Extented Capabilities Pointer. Algunas funções
de leitura de registro do espaço de configuração PCI não estavam funcinando
corretamente e precisaram ser revisadas.

	Uma mudança no estilo de armazenamento do endereço PCI no Device Object
estava gerando erro na hora de passar o endereço do dispositivo no barramento
pci. A correção foi remover da função PciDriver_ScanBus() a inversão dos bytes
quando lidos do buffer, passando para a IOReportDevice() da forma correta.

Notas de Retomada:

	O esqueleto do driver RootHub da pilha usb foi criado e precisa ser
preenchidocom o algoritmo para gerencia os Hubs. Algunas funções executdas no
momento pelo EHCI deverão ser transferidas para o Driver RootHub.
	Toda Chamada de criação de pipe para gerir um dispositivo USB deve ser
feita através da interface de comunicação de drivers (IODeviceControl()).
	O driver RootHub também será responsavel por gerir os Hubs genericos
conectados ao Hub Raiz e o driver deverá gerenciar cada Hub como um dispositivo
ligado ao controlador EHCI e ao mesmo tempo fornecer ao Driver USB que será ligado
sobre o driver de Hub uma interface que abstraia os hubs e permita o Driver USB
gerenciar os dispositivos e interfaces como se todos estivessem conectados na
mesma raíz.